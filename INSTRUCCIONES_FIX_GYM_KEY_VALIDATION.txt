# 🎯 INSTRUCCIONES PARA FRONTEND - FIX GYM KEY VALIDATION

## 🚨 **PROBLEMA IDENTIFICADO:**

### **❌ Error actual:**
```
PATCH https://api.capbox.site/identity/v1/usuarios/gimnasio/clave 400 (Bad Request)
{message: [La nueva clave debe tener al menos 8 caracteres.], error: Bad Request, statusCode: 400}
```

### **🔍 Causa raíz:**
El backend tiene una validación que requiere que la nueva clave de gimnasio tenga **al menos 8 caracteres**.

---

## 🔧 **SOLUCIÓN PARA EL FRONTEND:**

### **1. Validación en el frontend:**

```dart
// ✅ CORRECTO - Validar antes de enviar
String nuevaClave = "GYM-NUEVA-2025"; // 15 caracteres

if (nuevaClave.length < 8) {
  throw Exception('La nueva clave debe tener al menos 8 caracteres');
}

// Enviar al backend
final response = await dio.patch(
  '/identity/v1/usuarios/gimnasio/clave',
  data: {
    'nuevaClave': nuevaClave,
  },
);
```

### **2. Ejemplos de claves válidas:**

```dart
// ✅ VÁLIDAS (8+ caracteres)
"GYM-2025"           // 8 caracteres
"GYM-NUEVA-2025"     // 15 caracteres
"CAPBOX-GYM-2025"    // 16 caracteres
"ZIKAR-2025"         // 10 caracteres
"MI-GIMNASIO-2025"   // 18 caracteres

// ❌ INVÁLIDAS (< 8 caracteres)
"GYM"                // 3 caracteres
"GYM2025"            // 7 caracteres
"123"                // 3 caracteres
"ABC"                // 3 caracteres
```

### **3. Implementación completa en Flutter:**

```dart
Future<void> updateGymKey(String newKey) async {
  try {
    // ✅ VALIDACIÓN EN FRONTEND
    if (newKey.length < 8) {
      throw Exception('La nueva clave debe tener al menos 8 caracteres');
    }

    // ✅ VALIDACIÓN DE FORMATO (opcional)
    if (!RegExp(r'^[A-Z0-9\-_]+$').hasMatch(newKey)) {
      throw Exception('La clave solo puede contener letras mayúsculas, números, guiones y guiones bajos');
    }

    print('🔑 FRONTEND: Actualizando clave del gimnasio');
    print('📋 FRONTEND: Nueva clave: $newKey (${newKey.length} caracteres)');

    final response = await dio.patch(
      '/identity/v1/usuarios/gimnasio/clave',
      data: {
        'nuevaClave': newKey,
      },
      options: Options(
        headers: {
          'Authorization': 'Bearer $accessToken',
          'Content-Type': 'application/json',
        },
      ),
    );

    print('✅ FRONTEND: Clave actualizada exitosamente');
    print('📊 FRONTEND: Respuesta: ${response.data}');
    
    return response.data;
  } catch (e) {
    print('❌ FRONTEND: Error actualizando clave - $e');
    rethrow;
  }
}
```

### **4. Widget de validación en Flutter:**

```dart
class GymKeyTextField extends StatefulWidget {
  @override
  _GymKeyTextFieldState createState() => _GymKeyTextFieldState();
}

class _GymKeyTextFieldState extends State<GymKeyTextField> {
  final TextEditingController _controller = TextEditingController();
  String? _errorText;

  void _validateKey(String value) {
    setState(() {
      if (value.isEmpty) {
        _errorText = null;
      } else if (value.length < 8) {
        _errorText = 'La clave debe tener al menos 8 caracteres';
      } else if (!RegExp(r'^[A-Z0-9\-_]+$').hasMatch(value)) {
        _errorText = 'Solo letras mayúsculas, números, guiones y guiones bajos';
      } else {
        _errorText = null;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return TextField(
      controller: _controller,
      onChanged: _validateKey,
      decoration: InputDecoration(
        labelText: 'Nueva Clave del Gimnasio',
        hintText: 'Ej: GYM-NUEVA-2025',
        errorText: _errorText,
        helperText: 'Mínimo 8 caracteres',
      ),
    );
  }
}
```

---

## 🧪 **PRUEBAS PARA EL FRONTEND:**

### **1. Prueba con clave válida:**
```bash
PATCH /identity/v1/usuarios/gimnasio/clave
Authorization: Bearer <token>
Content-Type: application/json

{
  "nuevaClave": "GYM-NUEVA-2025"
}
```

**Respuesta esperada (200 OK):**
```json
{
  "claveGym": "GYM-NUEVA-2025"
}
```

### **2. Prueba con clave inválida (corta):**
```bash
PATCH /identity/v1/usuarios/gimnasio/clave
Authorization: Bearer <token>
Content-Type: application/json

{
  "nuevaClave": "GYM"
}
```

**Respuesta esperada (400 Bad Request):**
```json
{
  "message": ["La nueva clave debe tener al menos 8 caracteres."],
  "error": "Bad Request",
  "statusCode": 400
}
```

### **3. Prueba con clave inválida (caracteres especiales):**
```bash
PATCH /identity/v1/usuarios/gimnasio/clave
Authorization: Bearer <token>
Content-Type: application/json

{
  "nuevaClave": "GYM@2025"
}
```

**Respuesta esperada (400 Bad Request):**
```json
{
  "message": ["La nueva clave debe ser un texto válido."],
  "error": "Bad Request",
  "statusCode": 400
}
```

---

## 🎯 **VALIDACIONES DEL BACKEND:**

### **1. Validación de longitud:**
- ✅ Mínimo 8 caracteres
- ✅ Máximo 50 caracteres (recomendado)

### **2. Validación de formato:**
- ✅ Solo letras mayúsculas (A-Z)
- ✅ Números (0-9)
- ✅ Guiones (-)
- ✅ Guiones bajos (_)
- ❌ No espacios
- ❌ No caracteres especiales (@, #, $, etc.)

### **3. Validación de unicidad:**
- ✅ La clave debe ser única en toda la base de datos
- ❌ No puede repetirse con otro gimnasio

---

## 🔧 **CÓDIGOS DE ERROR POSIBLES:**

### **400 Bad Request:**
```json
{
  "message": ["La nueva clave debe tener al menos 8 caracteres."],
  "error": "Bad Request",
  "statusCode": 400
}
```

### **403 Forbidden:**
```json
{
  "statusCode": 403,
  "message": "Solo los administradores pueden cambiar la clave del gimnasio."
}
```

### **404 Not Found:**
```json
{
  "statusCode": 404,
  "message": "No se encontró un gimnasio propiedad del usuario con ID [user-id]."
}
```

### **409 Conflict:**
```json
{
  "statusCode": 409,
  "message": "La clave del gimnasio ya está en uso por otro gimnasio."
}
```

---

## ✅ **CHECKLIST PARA EL FRONTEND:**

### **Validaciones a implementar:**
- [ ] ✅ Validar longitud mínima (8 caracteres)
- [ ] ✅ Validar formato (solo A-Z, 0-9, -, _)
- [ ] ✅ Mostrar mensaje de error en tiempo real
- [ ] ✅ Deshabilitar botón si la clave es inválida
- [ ] ✅ Mostrar contador de caracteres
- [ ] ✅ Sugerir formato correcto

### **Ejemplos de claves válidas:**
- [ ] ✅ "GYM-2025" (8 caracteres)
- [ ] ✅ "ZIKAR-2025" (10 caracteres)
- [ ] ✅ "CAPBOX-GYM-2025" (16 caracteres)
- [ ] ✅ "MI_GIMNASIO_2025" (18 caracteres)

### **Ejemplos de claves inválidas:**
- [ ] ❌ "GYM" (3 caracteres)
- [ ] ❌ "GYM2025" (7 caracteres)
- [ ] ❌ "GYM@2025" (caracteres especiales)
- [ ] ❌ "GYM 2025" (espacios)

---

## 🎯 **RESUMEN:**

**El problema es que el frontend está enviando claves que no cumplen con la validación del backend:**

1. **✅ Backend espera:** Mínimo 8 caracteres
2. **❌ Frontend envía:** Claves cortas (< 8 caracteres)
3. **✅ Solución:** Validar en el frontend antes de enviar

**Implementar las validaciones en el frontend y el error 400 desaparecerá.** 🎉 