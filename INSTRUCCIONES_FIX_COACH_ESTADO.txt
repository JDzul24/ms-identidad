# 🎯 INSTRUCCIONES PARA FRONTEND - FIX COACH ESTADO

## ✅ **PROBLEMA RESUELTO EN BACKEND**

### **🔧 Cambios implementados:**

1. **✅ Coaches se crean automáticamente activos**
   - `Entrenador` y `Admin` → `estado_atleta: 'activo'`
   - `Atleta` → `estado_atleta: 'pendiente_datos'`

2. **✅ Permisos corregidos**
   - Ahora tanto `Entrenador` como `Admin` pueden aprobar atletas
   - Validación de estado activo antes de aprobar

3. **✅ Validaciones mejoradas**
   - Verificación de que el coach esté activo
   - Verificación de rol correcto

---

## 🚀 **FLUJO CORREGIDO**

### **Antes (❌ Problema):**
```
Coach se registra → Coach queda "pendiente_datos" → Error 403 al aprobar atletas
```

### **Ahora (✅ Solucionado):**
```
Coach se registra → Coach automáticamente "activo" → Puede aprobar atletas ✅
```

---

## 🧪 **PRUEBAS PARA EL FRONTEND**

### **1. Registro de Coach:**
```bash
POST /identity/v1/auth/register
{
  "email": "coach@test.com",
  "password": "password123",
  "nombre": "Coach Test",
  "rol": "Entrenador"
}
```

**Respuesta esperada:**
```json
{
  "id": "user-id",
  "email": "coach@test.com",
  "gymnarium": null
}
```

### **2. Login de Coach:**
```bash
POST /identity/v1/oauth/token
{
  "grant_type": "password",
  "client_id": "capbox-mobile-app",
  "client_secret": "capbox-secret-key-2024",
  "username": "coach@test.com",
  "password": "password123"
}
```

**Respuesta esperada:**
```json
{
  "access_token": "jwt-token",
  "refresh_token": "refresh-token"
}
```

### **3. Aprobar Atleta (ahora funciona):**
```bash
POST /identity/v1/atletas/{atletaId}/aprobar
Authorization: Bearer <jwt_token>
{
  "nivel": "principiante",
  "alturaCm": 170,
  "pesoKg": 70,
  "guardia": "orthodox",
  "alergias": "Ninguna",
  "contactoEmergenciaNombre": "Juan Pérez",
  "contactoEmergenciaTelefono": "1234567890"
}
```

**Respuesta esperada:**
```json
{
  "mensaje": "Atleta aprobado y perfil actualizado con éxito."
}
```

---

## 🎯 **CAMBIOS EN EL FRONTEND**

### **✅ NO SE REQUIEREN CAMBIOS EN EL FRONTEND**

El frontend puede seguir usando exactamente la misma lógica:

1. **Registro de coach** → Funciona igual
2. **Login de coach** → Funciona igual  
3. **Aprobar atletas** → Ahora funciona correctamente

### **🔍 Verificaciones que puede hacer el frontend:**

1. **Después del registro de coach:**
   - Verificar que no aparece mensaje "pendiente de datos"
   - Coach debe poder acceder a todas las funciones

2. **Después del login de coach:**
   - Verificar que el estado es "activo"
   - Coach debe poder aprobar atletas

3. **Al aprobar atletas:**
   - Ya no debe recibir Error 403
   - Debe recibir respuesta exitosa

---

## 🚨 **SI AÚN HAY PROBLEMAS**

### **Para coaches existentes (registrados antes de la corrección):**

El backend incluye un script SQL para corregir coaches existentes:

```sql
-- Ejecutar en la base de datos
UPDATE users 
SET estado_atleta = 'activo',
    datos_fisicos_capturados = true,
    fecha_aprobacion = NOW()
WHERE role IN ('Entrenador', 'Admin')
AND estado_atleta = 'pendiente_datos';
```

### **Verificación manual:**
```bash
# Verificar estado del coach
GET /identity/v1/usuarios/me
Authorization: Bearer <coach_token>

# Respuesta esperada:
{
  "id": "coach-id",
  "email": "coach@test.com",
  "nombre": "Coach Test",
  "rol": "Entrenador",
  "estado_atleta": "activo",  // ← Debe ser "activo"
  "datos_fisicos_capturados": true
}
```

---

## ✅ **CHECKLIST DE VERIFICACIÓN**

### **Para el Frontend:**
- [ ] ✅ Coach se registra sin problemas
- [ ] ✅ Coach puede hacer login
- [ ] ✅ Coach no ve mensaje "pendiente de datos"
- [ ] ✅ Coach puede aprobar atletas sin Error 403
- [ ] ✅ Atletas quedan en estado "pendiente_datos"
- [ ] ✅ Atletas pueden ser aprobados por coaches

### **Para el Backend (ya implementado):**
- [ ] ✅ Coaches se crean automáticamente activos
- [ ] ✅ Admins también pueden aprobar atletas
- [ ] ✅ Validaciones de estado activo
- [ ] ✅ Script SQL para coaches existentes

---

## 🎯 **RESUMEN**

**El problema era del BACKEND y ya está RESUELTO:**

1. **✅ Coaches se crean automáticamente activos**
2. **✅ Coaches pueden aprobar atletas**
3. **✅ Admins también pueden aprobar atletas**
4. **✅ Validaciones mejoradas**

**El frontend NO necesita cambios. Solo probar que ahora funciona correctamente.** 🎉 